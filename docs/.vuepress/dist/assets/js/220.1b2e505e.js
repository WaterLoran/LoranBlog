(window.webpackJsonp=window.webpackJsonp||[]).push([[220],{649:function(a,t,v){"use strict";v.r(t);var _=v(2),s=Object(_.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"b端bpm类软件的升级测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#b端bpm类软件的升级测试"}},[a._v("#")]),a._v(" B端BPM类软件的升级测试")]),a._v(" "),t("h2",{attrs:{id:"目前升级现状"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#目前升级现状"}},[a._v("#")]),a._v(" 目前升级现状")]),a._v(" "),t("p",[a._v("目前我是在一家做BPM类软件的小公司, 主要的迭代模式是大客户定制和小量的基线版本需求同时并行开发.")]),a._v(" "),t("p",[a._v("曾经存在过的问题有:")]),a._v(" "),t("ol",[t("li",[a._v("给客户升级前的回归测试不全面不严谨")]),a._v(" "),t("li",[a._v("给客户的生产环境升级前的功能回归测试也没有充分可靠的回归验证功能方式,基本以客户测试为主")]),a._v(" "),t("li",[a._v("给某客户升级时偶尔需要通过sql来维护环境的由代码逻辑错误引入的错误数据")]),a._v(" "),t("li",[a._v("升级过程无严谨的过程备案记录, 和操作的指导文档, 比如配置更新等无严谨的记录, 纯靠运维熟记于心")]),a._v(" "),t("li",[a._v("给正式环境升级前需要先在测试环境升级, 相当于转嫁了测试成本到客户方")]),a._v(" "),t("li",[a._v("升级后无严谨可靠的业务验证手段")]),a._v(" "),t("li",[a._v("升级能力依赖于k8s和docker提供的基础能力, 无二次封装")]),a._v(" "),t("li",[a._v("升级的交付件无明显的版本管理和打包, 是散乱的镜像文件和配置文件变更描述, 不是一键化操作的升级包")]),a._v(" "),t("li",[a._v("多客户升级时, 因多客户在同一版本同时开发, 导致需求不解耦, 交付风险难以定界和管控")]),a._v(" "),t("li",[a._v("多客户升级时, 未主动记录各个客户的版本信息, 未能主动管控交付的风险, 更多时候是被动响应和被动升级")])]),a._v(" "),t("h3",{attrs:{id:"升级质量效果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#升级质量效果"}},[a._v("#")]),a._v(" 升级质量效果")]),a._v(" "),t("ol",[t("li",[a._v("测试无明确的功能回归的目标和标准, 工作难以量化")]),a._v(" "),t("li",[a._v("运维的升级操作频繁, 各个客户都要灵活处理")]),a._v(" "),t("li",[a._v("需要有专职开发长期跟在项目上处理升级时的数据和异常问题")]),a._v(" "),t("li",[a._v("升级操作不规范, 小客户只能充分相信我司的开发的能力, 无过程的参与和管控能力")]),a._v(" "),t("li",[a._v("某些大客户可能需要间隔2-3天就升级一次, (这也有可能是因为devops的原因)")])]),a._v(" "),t("h3",{attrs:{id:"升级操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#升级操作"}},[a._v("#")]),a._v(" 升级操作")]),a._v(" "),t("ol",[t("li",[a._v("上传镜像到客户公司的内网环境的运维平台上")]),a._v(" "),t("li",[a._v("到晚上9点左右时, 修改配置, 并通过k8s运维平台来更换镜像")]),a._v(" "),t("li",[a._v("由k8s平台平滑切换镜像并自动分发流量到新的镜像服务")]),a._v(" "),t("li",[a._v("大致在生产环境简单测试几个简单功能来验证升级的正确性")])]),a._v(" "),t("h3",{attrs:{id:"升级背景及其驱动力"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#升级背景及其驱动力"}},[a._v("#")]),a._v(" 升级背景及其驱动力")]),a._v(" "),t("ol",[t("li",[a._v("因为项目的回款是分期的, 迫于回款压力, 需要去解决客户当前的一些小功能问题")]),a._v(" "),t("li",[a._v("软件在客户环境因软件逻辑引入了过多的数据错误, 为避免更多的数据丢失和错误会抓紧时间升级")])]),a._v(" "),t("h3",{attrs:{id:"升级过程的资产管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#升级过程的资产管理"}},[a._v("#")]),a._v(" 升级过程的资产管理")]),a._v(" "),t("p",[a._v("可能由于我司规模较小, 对于文档的管理工作并不是很上心, 一般由运维记录在文档中")]),a._v(" "),t("h3",{attrs:{id:"升级后的复盘"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#升级后的复盘"}},[a._v("#")]),a._v(" 升级后的复盘")]),a._v(" "),t("p",[a._v("目前我认为这块是很不足的, 当前的行为有, 运维会向总负责人(开发leader)汇报并讨论工作, 几乎忽略了测试在这个过程中的质量保障工作内容, 他们会一定程度把测试当成一个验证软件逻辑正确的员工, 而不是保障软件质量的员工, 他们对于测试的期望压根就不期望他能够去懂这个升级的相关操作和理论. (毕竟平时大部分测试是不具备环境的部署和维护能力的).")]),a._v(" "),t("p",[a._v("然后也没有开会总结的习惯.")]),a._v(" "),t("h2",{attrs:{id:"升级测试相关的研发问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#升级测试相关的研发问题"}},[a._v("#")]),a._v(" 升级测试相关的研发问题")]),a._v(" "),t("h3",{attrs:{id:"客户问题维护引入的数据库变更"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#客户问题维护引入的数据库变更"}},[a._v("#")]),a._v(" 客户问题维护引入的数据库变更")]),a._v(" "),t("p",[a._v("这个是比较严重的问题, 简单的数据维护, 可能不会出现什么问题, 但是总会有一定量的数据问题在遇到经验不足的开发的时候会出现问题")]),a._v(" "),t("h3",{attrs:{id:"liuquibase脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#liuquibase脚本"}},[a._v("#")]),a._v(" liuquibase脚本")]),a._v(" "),t("p",[a._v("为保证数据库的变更在升级路线中的一致性, 有一个liuquiabase工具, 可以通过验证哈希的方式来确保每一次的数据变更都能和升级脚本中编写的一致, 但是, 通常情况下, 客户会期望使用不同的数据库, 而liuquibase工具对于各类数据库的兼容性并不是完美的, 这就要求开发同事能够去了解各种不同的使用方法, 并且只编写最严谨的升级脚本, 否则将会在升级的过程中遇到各种报错, 然后需要开发来介入去手动修改数据库和操作升级.")]),a._v(" "),t("h3",{attrs:{id:"版本迭代过程中的数据库兼容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#版本迭代过程中的数据库兼容"}},[a._v("#")]),a._v(" 版本迭代过程中的数据库兼容")]),a._v(" "),t("p",[a._v("liuquibase可能对于某一个数据库的适配性是最好的, 比如mysql, 对于其他数据库可能就仅有实际操作过程中的拦截和报错, 并不会有像编译器一样的编译报错, 或者说有相关工具来去持续验证这个升级脚本的可靠性. 比如会体现在, 升级脚本可能并不能真是区分字符0, 还是数字0. 而导致阻塞.")]),a._v(" "),t("p",[a._v("这情况也是常有的, 但开发目前也还没有去总结并同步和培训, 也就仅仅口口相传的方式")]),a._v(" "),t("h3",{attrs:{id:"多客户升级下的版本管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多客户升级下的版本管理"}},[a._v("#")]),a._v(" 多客户升级下的版本管理")]),a._v(" "),t("p",[a._v("这个在比较早期的时候, 尝试将多个客户的需求都放在同一个版本中去迭代, 这就会出现一个问题, 不同客户的截至日期和需求量必然会天生的产生冲突. 在客户定制需求小的时候, 大概是不会有什么问题的, 但是在客户需求多且开发人员少的时候, 就会出现手忙脚乱, 焦头烂额, 喘气嘘嘘的情况了. 所以, 最后, 针对于这个问题, 最终还是选择了每个客户都采用采用一个单独的代码仓库, 这就一定程度能够去隔离各类交付风险.")]),a._v(" "),t("h2",{attrs:{id:"改进点及其思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#改进点及其思路"}},[a._v("#")]),a._v(" 改进点及其思路")]),a._v(" "),t("h3",{attrs:{id:"客户环境的数据库操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#客户环境的数据库操作"}},[a._v("#")]),a._v(" 客户环境的数据库操作")]),a._v(" "),t("ol",[t("li",[a._v("尽可能减少直接的手工操作数据库, 如果有也应该有多人同时查看确认")]),a._v(" "),t("li",[a._v("应该尽量确保所有的数据库操作都是通过升级脚本的")])]),a._v(" "),t("h3",{attrs:{id:"数据库比对"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库比对"}},[a._v("#")]),a._v(" 数据库比对")]),a._v(" "),t("p",[a._v("升级的逻辑, 也就是将二进制文件(镜像)进行替换, 将配置进行替换, 使用二进制文件的逻辑来对数据库进行变更. 所以这里或许可以考虑持续性的升级验证, 也就是监控升级脚本对于多个数据库的兼容性.")]),a._v(" "),t("h3",{attrs:{id:"服务的版本控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务的版本控制"}},[a._v("#")]),a._v(" 服务的版本控制")]),a._v(" "),t("p",[a._v("版本的控制应该是有明确的边界的, 这主要是为了能够给测试提供一个完整的测试的范围, 尽可能让测试有一个明确额边界感, 有目的有计划有方案的去做测试")]),a._v(" "),t("h3",{attrs:{id:"升级测试的日常化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#升级测试的日常化"}},[a._v("#")]),a._v(" 升级测试的日常化")]),a._v(" "),t("p",[a._v("目前存在的问题是, 开发测试都是直接在内部的同一套环境去做开发和测试的, 这就有可能导致, 环境出现问题的时候, 也是直接在环境上操作的, 所以, 就只会有少量的全新安装的场景, 那么这就有可能导致了升级问题被发现的滞后性, 一定程度引入了成本. 所以, 我建议每隔3-5天, 都应该全新安装一次环境. 或者有测试去自主搭建并维护自己的测试环境.")]),a._v(" "),t("h3",{attrs:{id:"升级后的自动化验收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#升级后的自动化验收"}},[a._v("#")]),a._v(" 升级后的自动化验收")]),a._v(" "),t("p",[a._v("老生常谈了, 但是这个常常会受限于公司的自动化能力的建设过程")]),a._v(" "),t("h3",{attrs:{id:"升级后的手工验收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#升级后的手工验收"}},[a._v("#")]),a._v(" 升级后的手工验收")]),a._v(" "),t("p",[a._v("这里建议可以搞一个checklist, 即升级后必须验证的测试点, 这样子大概能够拉平每次的回归测试的质量哦")]),a._v(" "),t("h3",{attrs:{id:"升级过程中的辅助工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#升级过程中的辅助工具"}},[a._v("#")]),a._v(" 升级过程中的辅助工具")]),a._v(" "),t("p",[a._v("这里主要指对升级过程中涉及的数据库变更的合理性的验证的工具")]),a._v(" "),t("h3",{attrs:{id:"迭代中的升级测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#迭代中的升级测试"}},[a._v("#")]),a._v(" 迭代中的升级测试")]),a._v(" "),t("p",[a._v("这里, 主要期望测试每个星期都能重新安装一次环境来做全新的测试, 或者说, 要有一个独立的环境来测试升级.")]),a._v(" "),t("h3",{attrs:{id:"权责重新分配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#权责重新分配"}},[a._v("#")]),a._v(" 权责重新分配")]),a._v(" "),t("p",[a._v("或许可以考虑让测试主导这个升级过程, 然后跟测试提质量诉求.")]),a._v(" "),t("h3",{attrs:{id:"控制版本的周期和数量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#控制版本的周期和数量"}},[a._v("#")]),a._v(" 控制版本的周期和数量")]),a._v(" "),t("p",[a._v("这样子相当于, 能够有足够的时间来测试, 不会自乱阵脚")])])}),[],!1,null,null,null);t.default=s.exports}}]);