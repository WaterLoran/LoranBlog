(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{515:function(t,_,v){"use strict";v.r(_);var a=v(2),r=Object(a.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"技术债管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#技术债管理"}},[t._v("#")]),t._v(" 技术债管理")]),t._v(" "),_("h2",{attrs:{id:"定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),_("p",[t._v("技术负债（英语：Technical debt），又译技术债，也称为设计负债（design debt）、代码负债（code debt），是编程及软件工程中的借鉴了财务债务的系统隐喻。")]),t._v(" "),_("h2",{attrs:{id:"误区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#误区"}},[t._v("#")]),t._v(" 误区")]),t._v(" "),_("ol",[_("li",[t._v('技术债务不是坏代码\n好的代码或许是整洁的代码, 也可以概括为破事你在未来做出特定决策的代码, 他保留了选择的余地. 而坏代码则不留余地, 还会强加上一些原本不存在的约束.\n理论上, 不存在"糟糕的开发者"编写的"坏代码", 至少在生产项目中没有(这正是diamante审查的作用). 或者说大多数"坏代码"出自于受到约束影响的优秀开发者.')]),t._v(" "),_("li",[t._v("技术债务是错误的\n技术债务和金融业务一样部分对错好坏. 只是在非理想的情况下(没有足够的现金)来满足需求, 算是一个产品开发工具箱中的一个有效工具")]),t._v(" "),_("li",[t._v("构建完成就万事大吉")])]),t._v(" "),_("h2",{attrs:{id:"表现特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#表现特点"}},[t._v("#")]),t._v(" 表现特点")]),t._v(" "),_("ol",[_("li",[t._v("和金融债务一样, 是一种透支行为, 通过牺牲未来满足当下的一些需求, 类比于金融, 技术债务也有利息, 随着时间利滚利, 就会成为一个埋在项目中的定时炸弹.")]),t._v(" "),_("li",[t._v("本质是产品的结构阻碍了进步, 比如无法轻易重构, 组件之间的依赖性过多, 缺陷太多, 结构不良, 难以理解, 难以改变")]),t._v(" "),_("li",[t._v("影响后果比如会有, 降低员工士气, 因为遗留问题导致人才流失, 产品质量下降导致客户满意度下降, 限制创新能力")]),t._v(" "),_("li",[t._v("可以分为2维度, 4象限, 即(有意的-无心的)维度, 和(草率的-慎重的)2维度")])]),t._v(" "),_("h2",{attrs:{id:"如何产生的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何产生的"}},[t._v("#")]),t._v(" 如何产生的")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("原因点")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("业务压力")]),t._v(" "),_("td",[t._v("为了满足业务的快速要求，在必要的修改并没有完成时就匆匆发布，这些未完成的修改就形成了技术负债。")])]),t._v(" "),_("tr",[_("td",[t._v("缺少过程和理解")]),t._v(" "),_("td",[t._v("业务人员不清楚不理解技术负债的概念，在决策时就不会考虑到其带来的影响。")])]),t._v(" "),_("tr",[_("td",[t._v("模块之间解耦不够")]),t._v(" "),_("td",[t._v("功能没有模块化，软件柔性不够，不足适应业务变化的要求。")])]),t._v(" "),_("tr",[_("td",[t._v("缺少配套的自动化测试")]),t._v(" "),_("td",[t._v("导致鼓励快速而风险很大的“创可贴”式的BUG修复。")])]),t._v(" "),_("tr",[_("td",[t._v("缺少必要文档")]),t._v(" "),_("td",[t._v("需求和代码都没有必要的支撑性文档或注释。")])]),t._v(" "),_("tr",[_("td",[t._v("缺少协作")]),t._v(" "),_("td",[t._v("组织中的知识共享和业务效率较低，或者初级开发者缺少必要的指导。")])]),t._v(" "),_("tr",[_("td",[t._v("重构延迟")]),t._v(" "),_("td",[t._v("在开发的过程中，某些部分的代码会变得难以控制，这时候就需要进行重构，以适应将来的需求变化。重构越是推迟，这些已有的代码被使用的越多，形成的技术负债就越多，直到重构完成。")])]),t._v(" "),_("tr",[_("td",[t._v("不遵循标准或最佳实践")]),t._v(" "),_("td",[t._v("忽略了已有的业界标准、框架、技术和最佳实践。")])]),t._v(" "),_("tr",[_("td",[t._v("缺少相关技能")]),t._v(" "),_("td",[t._v("开发人员有时候技能缺失，并不知道如何编写优雅的代码。")])])])]),t._v(" "),_("h3",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结:")]),t._v(" "),_("p",[t._v("有两个来源:")]),t._v(" "),_("ol",[_("li",[t._v("决策的权衡利弊和取舍(鲁莽vs谨慎)")]),t._v(" "),_("li",[t._v("指定和执行决策时具备(或者缺乏)的知识, 即有意或无意")])]),t._v(" "),_("h3",{attrs:{id:"开发的思考表现特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#开发的思考表现特点"}},[t._v("#")]),t._v(" 开发的思考表现特点")]),t._v(" "),_("p",[t._v("有意且鲁莽: 我们没有时间做设计")]),t._v(" "),_("p",[t._v("有意且谨慎: 我们必须先交付, 在处理追求速度所导致的结果")]),t._v(" "),_("p",[t._v("无意且鲁莽: 什么是分层?")]),t._v(" "),_("p",[t._v("无意且谨慎: 我们现在知道该怎么做了")]),t._v(" "),_("h2",{attrs:{id:"技术债务的类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#技术债务的类型"}},[t._v("#")]),t._v(" 技术债务的类型")]),t._v(" "),_("p",[t._v("根据技术债务的来源和性质，可以将其分为不同的类型：")]),t._v(" "),_("h4",{attrs:{id:"_1-设计债务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-设计债务"}},[t._v("#")]),t._v(" 1. 设计债务")]),t._v(" "),_("p",[t._v("设计层面的技术债务包括系统架构不合理、模块耦合度过高、缺乏清晰的抽象和设计模式等。这类债务的积累会导致系统难以扩展或维护。")]),t._v(" "),_("h4",{attrs:{id:"_2-代码债务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-代码债务"}},[t._v("#")]),t._v(" 2. 代码债务")]),t._v(" "),_("p",[t._v("代码债务是由于不良编码实践而产生的，比如代码重复、冗余代码、命名混乱、注释不足或没有遵循代码标准。这会使代码难以阅读、调试和修改。")]),t._v(" "),_("h4",{attrs:{id:"_3-测试债务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-测试债务"}},[t._v("#")]),t._v(" 3. 测试债务")]),t._v(" "),_("p",[t._v("测试债务是指由于缺乏足够的测试覆盖而导致的问题。这可能包括单元测试、集成测试或自动化测试不足，导致后续系统迭代中缺乏信心，容易引发回归 Bug。")]),t._v(" "),_("h4",{attrs:{id:"_4-文档债务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-文档债务"}},[t._v("#")]),t._v(" 4. 文档债务")]),t._v(" "),_("p",[t._v("文档不足或过时是技术债务的一个常见形式。缺乏详细的设计文档、API 文档或用户手册会导致团队在维护和扩展系统时需要更多时间去理解已有系统。")]),t._v(" "),_("h4",{attrs:{id:"_5-基础设施债务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-基础设施债务"}},[t._v("#")]),t._v(" 5. 基础设施债务")]),t._v(" "),_("p",[t._v("基础设施层面的债务包括使用老旧的硬件或软件版本、依赖过时的框架或库等，这些问题可能会导致系统的性能或安全性问题，增加技术支持的复杂性。")]),t._v(" "),_("h2",{attrs:{id:"优先级排序技术"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优先级排序技术"}},[t._v("#")]),t._v(" 优先级排序技术")]),t._v(" "),_("p",[_("strong",[t._v("ICE 和 RICE 得分")])]),t._v(" "),_("p",[t._v("你最终会得到许多不同大小和影响的项目，然后变得非常混乱。ICE 有助于为这种混乱带来秩序，它可以通过一种系统性的方法来评估这些项目，并创建一个单一数字表示它们的优先级，你可以简单地借此对它们进行排序。")]),t._v(" "),_("p",[t._v("ICE 代表影响（Impact）、信心（Confidence）和努力程度（Ease/Effort）。RICE 中的 R 代表影响范围（Reach）。")]),t._v(" "),_("p",[t._v("对于其中每一个因素，团队在一组数值点上达成一致，例如：Massive = 3 High = 2, Medium = 1, Low = 0.5, Minimal = 0.25")]),t._v(" "),_("p",[_("strong",[t._v("影响")]),t._v(" —— 解决此问题会对客户产生什么影响（记住，客户也可能是内部的！）——或者，在考虑风险时，解决此问题不会产生什么影响？")]),t._v(" "),_("p",[_("strong",[t._v("信心")]),t._v(" —— 你对影响（以及可选的努力程度）的估计有多大信心？")]),t._v(" "),_("p",[_("strong",[t._v("努力程度")]),t._v(" —— 努力程度通常更容易谈论——解决问题需要付出多少努力？请记住，这是一个相对指标，只能与当前批次中的其它问题进行比较。")]),t._v(" "),_("p",[_("strong",[t._v("响应范围")]),t._v(" —— 这将影响多少人？100%的客户群？还是只有某一特定角色的客户？")]),t._v(" "),_("p",[t._v("重要的是，要了解这些分数仅在本地相对环境中有意义，不应跨域进行比较。")]),t._v(" "),_("p",[t._v("一旦你有了这些数字，计算就很容易了：")]),t._v(" "),_("p",[_("strong",[t._v("RICE 得分 = (Impact x Confidence) / Effort or Impact x Confidence x Ease")])]),t._v(" "),_("h2",{attrs:{id:"如何削减技术债务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何削减技术债务"}},[t._v("#")]),t._v(" 如何削减技术债务")]),t._v(" "),_("h3",{attrs:{id:"技术债可视化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#技术债可视化"}},[t._v("#")]),t._v(" 技术债可视化")]),t._v(" "),_("p",[t._v("尽可能公开技术债, 与利益相关方一起权衡利弊, 协商相关解决方案, 相互理解平等沟通. 记录为组织资产, 分为短期技术债和长期技术债. 还可以跟踪开发开发速率来体现技术债对产品的影响")]),t._v(" "),_("h3",{attrs:{id:"不同的债要对症下药"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#不同的债要对症下药"}},[t._v("#")]),t._v(" 不同的债要对症下药")]),t._v(" "),_("ol",[_("li",[t._v("确定已知技术债必须还。")]),t._v(" "),_("li",[t._v("发现偶然技术债，立即还。")]),t._v(" "),_("li",[t._v("每个冲刺确定一定数量的已知技术债作为目标技术债，在当前冲刺中偿还。")]),t._v(" "),_("li",[t._v("无需偿还的技术债是行将就木的产品、一次性原型和短命产品。")])]),t._v(" "),_("h3",{attrs:{id:"为技术债分配专用力量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为技术债分配专用力量"}},[t._v("#")]),t._v(" "),_("strong",[t._v("为技术债分配专用力量")])]),t._v(" "),_("p",[t._v("有些团队将一定比例的工期时间用于各种类型的工作。一个常见的设置是 70%用于功能开发，20%用于技术债，10%用于学习/实验。")]),t._v(" "),_("h3",{attrs:{id:"每段工期都要解决-n-个技术债问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#每段工期都要解决-n-个技术债问题"}},[t._v("#")]),t._v(" "),_("strong",[t._v("每段工期都要解决 N 个技术债问题")])]),t._v(" "),_("p",[t._v("相当于是一种目标驱动的方法")]),t._v(" "),_("h3",{attrs:{id:"将比较重要的技术债务当作项目"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#将比较重要的技术债务当作项目"}},[t._v("#")]),t._v(" "),_("strong",[t._v("将比较重要的技术债务当作项目")])]),t._v(" "),_("p",[t._v("技术债务的形式是比较长的项目，实际上需要相应的规划和执行。\n另外一方面, 这也是一种在KPI管理下的有效分工")]),t._v(" "),_("h3",{attrs:{id:"将中等大小的技术债当作涉及该系统或代码库的下一个项目的一部分"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#将中等大小的技术债当作涉及该系统或代码库的下一个项目的一部分"}},[t._v("#")]),t._v(" "),_("strong",[t._v("将中等大小的技术债当作涉及该系统或代码库的下一个项目的一部分")])]),t._v(" "),_("h2",{attrs:{id:"如何避免产生技术债务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何避免产生技术债务"}},[t._v("#")]),t._v(" 如何避免产生技术债务")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("避免使用过时的技术")])]),t._v(" "),_("li",[_("p",[t._v("参考敏捷实践")])]),t._v(" "),_("li",[_("p",[t._v("遵循代码规范")])])]),t._v(" "),_("h2",{attrs:{id:"参考文章"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章:")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://www.infoq.cn/article/hth2qbjhf2oco1cgjqqd",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何领导团队做好技术债管理"),_("OutboundLink")],1)]),t._v(" "),_("p",[_("a",{attrs:{href:"https://utgd.net/article/20789",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么软件开发总有“技术债”？你需要了解管理技术债务的策略与方法"),_("OutboundLink")],1)]),t._v(" "),_("p",[_("a",{attrs:{href:"https://queue.acm.org/detail.cfm?id=2168798",target:"_blank",rel:"noopener noreferrer"}},[t._v("Managing Technical Debt"),_("OutboundLink")],1)]),t._v(" "),_("p",[_("a",{attrs:{href:"https://ligai.cn/blog/%E7%A0%94%E5%8F%91%E7%AE%A1%E7%90%86/1528.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("研发团队的「技术债」如何进行量化管理？"),_("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=r.exports}}]);