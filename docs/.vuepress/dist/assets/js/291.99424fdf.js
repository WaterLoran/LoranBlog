(window.webpackJsonp=window.webpackJsonp||[]).push([[291],{720:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("code",[t._v("pytest-check")]),t._v(" 是一个用于增强 "),s("code",[t._v("pytest")]),t._v(" 测试框架的插件，允许在测试中进行多次断言，而不在第一个失败后立即停止测试。以下是 "),s("code",[t._v("pytest-check")]),t._v(" 的各种用法和示例。")]),t._v(" "),s("h3",{attrs:{id:"_1-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装"}},[t._v("#")]),t._v(" 1. 安装")]),t._v(" "),s("p",[t._v("首先，需要通过 "),s("code",[t._v("pip")]),t._v(" 安装 "),s("code",[t._v("pytest-check")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("pip "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" pytest-check\n")])])]),s("h3",{attrs:{id:"_2-基本用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-基本用法"}},[t._v("#")]),t._v(" 2. 基本用法")]),t._v(" "),s("p",[t._v("在测试函数中使用 "),s("code",[t._v("check")]),t._v(" 方法进行断言。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pytest\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pytest_check "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" check\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    check"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过")]),t._v("\n    check"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 失败")]),t._v("\n    check"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过")]),t._v("\n")])])]),s("p",[t._v("在这个例子中，尽管第二个断言失败，测试仍会继续执行并检查后续的断言。")]),t._v(" "),s("h3",{attrs:{id:"_3-断言的多样性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-断言的多样性"}},[t._v("#")]),t._v(" 3. 断言的多样性")]),t._v(" "),s("p",[s("code",[t._v("pytest-check")]),t._v(" 支持多种断言方法，如下：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("check.equal(actual, expected)")]),t._v(": 检查两个值是否相等。")]),t._v(" "),s("li",[s("code",[t._v("check.not_equal(actual, expected)")]),t._v(": 检查两个值是否不相等。")]),t._v(" "),s("li",[s("code",[t._v("check.is_true(expression)")]),t._v(": 检查表达式是否为真。")]),t._v(" "),s("li",[s("code",[t._v("check.is_false(expression)")]),t._v(": 检查表达式是否为假。")]),t._v(" "),s("li",[s("code",[t._v("check.is_none(value)")]),t._v(": 检查值是否为 "),s("code",[t._v("None")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("check.is_not_none(value)")]),t._v(": 检查值是否不为 "),s("code",[t._v("None")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("check.is_in(element, container)")]),t._v(": 检查元素是否在容器中。")]),t._v(" "),s("li",[s("code",[t._v("check.is_not_in(element, container)")]),t._v(": 检查元素是否不在容器中。")])]),t._v(" "),s("h3",{attrs:{id:"_4-捕获异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-捕获异常"}},[t._v("#")]),t._v(" 4. 捕获异常")]),t._v(" "),s("p",[t._v("可以使用 "),s("code",[t._v("check.raises")]),t._v(" 来检查是否抛出特定的异常：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_exception")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" check"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("raises"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ValueError"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'invalid'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"_5-组合使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-组合使用"}},[t._v("#")]),t._v(" 5. 组合使用")]),t._v(" "),s("p",[t._v("可以在同一个测试中结合多个检查方法：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_multiple_checks")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    check"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    check"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("is_true"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    check"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("is_in"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    check"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("not_equal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"_6-生成报告"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-生成报告"}},[t._v("#")]),t._v(" 6. 生成报告")]),t._v(" "),s("p",[s("code",[t._v("pytest-check")]),t._v(" 自动收集所有断言的结果，包括成功和失败的。运行测试时，只需正常使用 "),s("code",[t._v("pytest")]),t._v(" 命令：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("pytest\n")])])]),s("p",[t._v("在测试完成后，失败的断言和成功的断言都会被列出，有助于快速定位问题。")]),t._v(" "),s("h3",{attrs:{id:"_7-过滤失败的断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-过滤失败的断言"}},[t._v("#")]),t._v(" 7. 过滤失败的断言")]),t._v(" "),s("p",[t._v("可以使用 "),s("code",[t._v("--check")]),t._v(" 选项来控制报告失败断言的行为。例如，使用 "),s("code",[t._v("-q")]),t._v(" 选项可以减少输出的详细信息。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("pytest "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-q")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--check")]),t._v("\n")])])]),s("h3",{attrs:{id:"_8-注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-注意事项"}},[t._v("#")]),t._v(" 8. 注意事项")]),t._v(" "),s("ul",[s("li",[t._v("使用 "),s("code",[t._v("pytest-check")]),t._v(" 时，建议在逻辑上相关的断言中使用它，以便更清晰地反映测试意图。")]),t._v(" "),s("li",[t._v("在某些情况下，过多的断言可能会导致测试难以阅读和理解，因此应适量使用。")])]),t._v(" "),s("h3",{attrs:{id:"结论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[t._v("#")]),t._v(" 结论")]),t._v(" "),s("p",[s("code",[t._v("pytest-check")]),t._v(" 是一个灵活的工具，适用于需要在单个测试中进行多个断言的场景。它使得测试更加全面，同时提供更清晰的失败报告，帮助开发者快速识别和修复问题。")])])}),[],!1,null,null,null);s.default=n.exports}}]);